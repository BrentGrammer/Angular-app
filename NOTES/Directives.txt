DIRECTIVES:

-Instructions to manipulate the DOM in some way

-Typically you set Directives on elements as attributes (you can also use different selectors if desired)

-Use the Directive decorator on a Directive class to tell angular what the selector is to find 
it in the html template and run the desired instruction.

@Directive({
  selector: '[turnElementGreen]'
})
export class TurnGreenDirective {
}

<element turnElementGreen></element>

*** When creating a directive, remember to add it to the declarations list in app.module.ts!!!


----

TYPES OF DIRECTIVES:

-Structural: add or remove elements from the DOM (ex. *ngIf, *ngFor) - prefixed with a * sign in the code
-Attribute: Dynamically set an attribute on an element, not preceded by a *. (Ex: ngStyle, ngClass)

------------

BUILT IN DIRECTIVES:


STRUCTURAL:

*ngIf:

-accepts any expression returning True or False
-You need to add a * before ngIf to tell Angular that it is a structural Directive (it adds or removes an element 
and changes the structure of the DOM)

ngElse:

-builtin ng-template with reference set on it used in else statement

<p *ngIf="serverCreated; else noServer">Server was created, name: {{ serverName }}</p>
<ng-template #noServer>
  <p>No SErver created</p>
</ng-template>

-

*ngFor:

Syntax: <element *ngFor="let varName of classPropArrayName">{{ varName }}</element>

**The entire element and any nested els have access to the let variable via string interpolation
Note: when using string interpolation set to attributes, keep everything in quotes:
i.e. <img src="{{ source }}" />

You can also use property binding instead (leave out the {{}} and just enter an expression that returns a string)
<img [src]="image.source" />

Ex:
<app-server *ngFor="let server of servers">{{ server }}</app-server>

In the class ts file:

class...
   servers = ['Test Server', 'Test Server 2'];

-Get access to the index of the item in the array by binding a variable of your choice to the key word `index`:

<el *ngFor="let item of items; let i = index">{{ i }}</el>

--

### ngSwitch:

// In app-component html template:
```
 <div [ngSwitch]="value">
  <p *ngSwitchCase="5">Value is 5</p>
  <p *ngSwitchCase="10">Value is 10</p>
  <p *ngSwitchDefault>Value is default</p>
</div>
```

In the ts file:
```
export class AppComponent {
  value = 10;
}
```
// will show 10 in the DOM


-------------------

ATTRIBUTE DIRECTIVES:

-Only affect the element they are placed on and do not add or remove elements from the DOM (there is no * preceding them)
-Allows you to dynamically assign an attribute value to an element

ngStyle:

- used to dynamically assign a style to an element in the html template of the component
- To use this use property binding on a property of the directive (in this case it happens to be ngStyle)
Important: Note that you are property binding to a property on the ngStyle directive called 'ngStyle' and this is not
the actual directive itself.

- the property expects a Javascript Object with the CSS style property as the key and it's value as the value.
Note: if you want to use the dash syntax directly from CSS you need to enclose the key in single quotes to make it a 
valid object property, otherwise use camel case: Ex: "{ 'background-color': <value> }", or "{ backgroundColor: <value> }"



<p [ngStyle]="{backgroundColor: getColor()}">Server with id {{ serverId }} is {{ getServerStatus() }}</p>

-In the class, you can define the method you are referencing in the directive (i.e. getColor()):

class....

  getColor() {
      return this.serverStatus === 'online' ? 'green' : 'red';
  }

-Now when there is binding to the ngStyle prop on the p element which will update when the serverStatus changes
and call the getColor method which returns a string for the value ofthe background color css style prop.

--

ngClass:

-Dynamically set a class for an element - use with property binding.

-Takes a object where the keys are the CSS class names and the values are whether the class name should be applied
or not (i.e. expression returning a boolean)

NOTE: If you want to use a class name with dashes in it as the key, you need to place it in single quotes:
[ngClass]="{'class-name': ... }"

Syntax: <element [ngClass]="{ className: condition }"></element>

Ex:
<p 
  [ngStyle]="{ backgroundColor: getColor() }"
  [ngClass]="{ online: serverStatus === 'online' }"
>
  Server with id {{ serverId }} is {{ getServerStatus() }}
</p>

// will apply .online class to the element if the serverStatus prop in the component class definition (ts file) is set
to the string 'online'.

--------------------

NG-CONTENT:

PROJECTING DATA WITH NG-CONTENT:

  - If you want to pass in html content into a component from outside (i.e. in between opening and closing tags of a
    child component) - by default Angular removes anything between the opening and closing tags of a child component from
    the DOM.

  - Useful if you want to make tab components or widgets, since property binding would escape html to prevent
    cross scripting attacks - ng-content is a better solution

  - Use ng-content directive to tell Angular to render whatever is passed into the component tags inside the 
    parent component.  Acts as a hook to place where Angular should add any content passed into the component 
    from the parent.



    Ex: 

    // parent passing in content to child app-server-element:
    <div class="container">
      <app-cockpit
        (serverCreated)="onServerAdded($event)"
        (bpCreated)="onBluePrintAdded($event)"
      ></app-cockpit>
      <hr />
      <div class="row">
        <div class="col-xs-12"></div>
        <app-server-element
          *ngFor="let serverElement of serverElements"
          [srvElement]="serverElement"
        >
          <p>
            <strong *ngIf="serverElement.type === 'server'" style="color: red">{{
              element.content
            }}</strong>
            <em *ngIf="serverElement.type === 'blueprint'">{{ element.content }}</em>
          </p>
        </app-server-element>
      </div>
    </div>

    // child app-server-element with ng-content directive to render passed in content:
    <div class="panel panel-default">
      <div class="panel-heading">{{ element.name }}</div>
      <div class="panel-body">
        <ng-content></ng-content>
      </div>
    </div>

---

  @CONTENTCHILD:

  -You can access element refs of content coming from another component that is passed into ng-content tags of a child 
  by using @ContentChild('refLabel') decorator on a property in the child ts file(of the component that is having content 
  passed in).

  NOTE: You cannot access the value of the property until ngAfterContentInit lifecycle event has occured.

  // In parent component html:
      <app-server-element
        *ngFor="let serverElement of serverElements"
        [srvElement]="serverElement"
      >
      <p #contentParagraph>
        This is projected into the child component
      </p>
    </app-server-element>

  Ex in child component ts file:
    // get local ref of an element in the content passed into this component:
    @ContentChild("contentParagraph", { static: true }) paragraph: ElementRef;

    ngOnInit() {
      // text content is empty here
      console.log("paragraph content", this.paragraph.nativeElement.textContent);
    }

  ngAfterContentInit() {
    // text content will now have a value
    console.log("paragraph content", this.paragraph.nativeElement.textContent);
  }

  =======================

  CREATE A DIRECTIVE:

  Generate a Directive with: 

  `$ ng g d directive-name`

  1) create a new folder in the app/ directory of the project named after the directive to create
      Ex: app/directive-name/

  2) create a directive file in the directory:
      Ex: app/directive-name/directive-name.directive.ts

  3) create a class that is wrapped in a @Directive attribute and export the class as a named export:

    Ex:
      import { Directive } from "@angular/core";

      /**
      * Pass in a config object:
      *  -needs a unique selector in camelCase (i.e. it's label used in the html template) wrapped in sqaure brackets 
      *   (this means
      *   that appBasicHighlight attribute without square brackets will be recognized in the template)
      *    common convention is to prepend the name with `app`
      */

      @Directive({
        selector: "[appBasicHighlight]"
      })
      export class BasicHighlightDirective {}

  4) Access the ref to the element the directive is applied to - Angular allows you to access the injected element ref 
     in the constructor as an automatically passed in argument (you can name it whatever, but its type must be 
     ElementRef).
     You need to assign the value to a property on the class (either explicitly or implicitly by adding an access 
     modifier in front of the argument):

     Ex:

     export class BasicHighlightDirective {
      constructor(private elementRef: ElementRef) {}
     }

    NOTE: It is BAD PRACTICE to access and manipulat the ref directly in the class.
          **It is better to use the passed in renderer from Angular - access in the constructor with type Renderer2

          Ex:

          - Pass in the Angular provided ElementRef arg and renderer to the constructor and use setStyle in the 
            ngOnInit method.
          - in the setStyle method, make sure to access the nativeElement to set the style on

          ```
            { Directive, OnInit, Renderer2, ElementRef } from "@angular/core";

            @Directive({
              selector: "[appBetterHighlight]"
            })
            export class BetterHighlightDirective implements OnInit {
              constructor(elementRef: ElementRef, renderer: Renderer2) {}

              ngOnInit() {
                renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'blue')
              }
            }
          ```

        Renderer2 docs: https://angular.io/api/core/Renderer2

  5) Do something with the element ref (best place is in the onInit lifecycle method):
     -access the nativeElement prop on the passed in element ref assigned to a property

      Ex:

      export class BasicHighlightDirective implements OnInit {
        constructor(private elementRef: ElementRef) {}

        ngOnInit() {
          this.elementRef.nativeElement.style.backgroundColor = "green";
        }
      }

  6) Inform Angular about your directive in app.module.ts - add it to the declarations:
    
    Ex in app.module.ts:

      ...imports
      import { BasicHighlightDirective } from './basic-highlight/basic-highlight.directive';

      @NgModule({
        declarations: [
          AppComponent,
          BasicHighlightDirective
        ],
        ...})

    7) In the html template, add the directive by using the label specified in the selector prop of the @Directive
       decorator (without sq brackets) as an attribute to the element:

    Ex:
      <p appBasicHighlight>Style me</p>

### Reactive Directives: Targeting events on the element to react to:

- Use the @HostListener decorator in the directive class
- You can pass in any event that is supported by the element to listen to it and react to it to change style.
- Add the decorator to some method to execute when the event occurs (the method can receive the event data as an arg)

```
export class BetterHighlightDirective implements OnInit {
  // use prop binding to be allow for setting values dynamically:
  @Input() highlightColor: string = "purple";
  @Input() defaultColor: string = "blue";
  // remember to set an initial value to prevent errors:
  @HostBinding("style.backgroundColor") backgroundColor: string = this
    .defaultColor;

  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}

  ngOnInit() {
    this.backgroundColor = this.defaultColor;
  }

  @HostListener("mouseenter") mouseover(eventData: Event) {
    this.backgroundColor = this.highlightColor;
  }
  @HostListener("mouseleave") mouseleave(eventData: Event) {
    this.backgroundColor = this.defaultColor;
  }
}
```

### @HOSTBINDING

- You can also use @HostBinding decorator to bind the style property of the host element to a value of a property in your
  directive class

- Pass in the property of the element (in JavaScript DOM prop format) to the decorator and apply it to a property on
  your class which you can then set a value to (i.e. in the ngOnInit)


  Ex:

  ```
  export class BetterHighlightDirective implements OnInit {

    // remember to set an initial value to prevent errors:
    @HostBinding("style.backgroundColor") backgroundColor: string = "blue";

    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}

    // no need to initialize it in onInit
    ngOnInit() {}

    @HostListener("mouseenter") mouseover(eventData: Event) {
      this.backgroundColor = "purple";
    }
    @HostListener("mouseleave") mouseleave(eventData: Event) {
      this.backgroundColor = "blue";
    }
  }
  ```

  ### Making values in the directive dynamic:

  - Add property binding with @Input decorator to allow values to be set by the user to use in the directive.
  - on the element in the html template, the user can bind to these to set them for use in the directive
  - In the directive class set values to these properties instead of hard coding them.

  Ex:

  ```
    export class BetterHighlightDirective implements OnInit {

      // use prop binding to be allow for setting values dynamically:
      @Input() highlightColor: string = "purple";
      @Input() defaultColor: string = "blue";

      @HostBinding("style.backgroundColor") backgroundColor: string = this
        .defaultColor;

      constructor(private elementRef: ElementRef, private renderer: Renderer2) {}

      // set the default in oninit to prevent first render not showing the user set default color
      ngOnInit() {
        this.backgroundColor = this.defaultColor
      }

      @HostListener("mouseenter") mouseover(eventData: Event) {
        this.backgroundColor = this.highlightColor;
      }
      @HostListener("mouseleave") mouseleave(eventData: Event) {
        this.backgroundColor = this.defaultColor;
      }
    }

  ```

  // In the html template:
  `<p appBetterHighlight [defaultColor]="'yellow'" [highlightColor]="'red'">`

NOTE: you can alias a property to set in the directive to the same name as the directive which enables you to set a 
value by enclosing the directive name in square brackets instead of having to add that property on the element in addition
to having the directive name (not in square brackets).
An example of this use case is [ngClass] which is a directive that allows the setting of a property aliased to the same
name.

Ex:
```
export class BetterHighlightDirective implements OnInit {

      // use prop binding to be allow for setting values dynamically:
      @Input('appBetterHighlight') highlightColor: string = "purple";

      ...
```

      // Now in the html template:
      `<p [appBetterHighlight]="'yellow'">text</p>`

#### NOTE: If you are just passing a string in a bound prop, you can remove the square brackets and just have one set
of quotes:

Ex:
  `<p [myprop]="'string'">`

  becomes

  `<p myprop="string">`
  // works the same without sq brackets

  =====================================

  ## STRUCTURAL DIRECTIVES:

  - Behind the scenes Angular transforms structural directives with `*` to an ng-template block
  - an ng-template element is provided by Angular and is not rendered to the DOM - it is a container for elements that
    will be conditionally rendered by Angular.

  *** When creating a directive, remember to add it to the declarations list in app.module.ts!!!

  ```
  <ng-template [ngIf]="my condition here">
    <elements...>
  </ng-template>
  ```

  same as:

  ```
  <elements... *ngIf="my condition here">
  ```

  CREATING STRUCTURAL DIRECTIVE:

  - `$ ng g d directive-name`

  - Use @Input on a property that has a setter method accepting a user inputted value. 
  - In the setter method, access the ViewContainerRef and TemplateRef passed into the constructor by Angular.

  Ex:
  ```
  export class UnlessDirective {
    // using `set` turns the property into a setter method which will run everytime the property changes
    // NOTE: Make sure to name the property the same as the directive so you can set it on the element in the html template
    @Input() set appUnless(condition: boolean) {
      if (!condition) {
        // add the underlying ng-template to the DOM
        this.vcRef.createEmbeddedView(this.templateRef);
      } else {
        // remove everything from the place in the DOM specified by the ViewContianerRef:
        this.vcRef.clear();
      }
    }

    /* get access to the ng-template (under the hood Angular creates this and this is where the structural directive sits)
      TemplateRef takes a generic type 
    
      get access to where in the html template to render (use the ViewContainerRef).
      ViewContainerRef marks the place in the document thedirective is being used.
    */
    constructor(
      private templateRef: TemplateRef<any>,
      private vcRef: ViewContainerRef
    ) {}
  }
  ```

  - In the html template to use it:
  `<div *appUnless="!onlyOdd">`

  ## Create a Toggle dropdown directive:

  - Adds a class "open" to an element to open a dropdown:

```
  @Directive({
    selector: "[appDropdown]"
  })
  export class DropdownDirective {
    @HostBinding("class.open") isOpen = false;

    @HostListener("click") toggleOpen(event: Event) {
      this.isOpen = !this.isOpen;
    }
  }
```

// In the html template:
<div appDropdown>

// To make the dropdown close when you click anywhere on the window outside, listen for the event.target on the document:
```
@Directive({
  selector: '[appDropdown]'
})
export class DropdownDirective {
  @HostBinding('class.open') isOpen = false;
  @HostListener('document:click', ['$event']) toggleOpen(event: Event) {
    this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;
  }
  constructor(private elRef: ElementRef) {}
}
```





